{"version":3,"sources":["logo.svg","Quiz.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Hero","react_default","a","createElement","className","Book","_ref","title","Turn","_ref2","authors","books","style","backgroundColor","src","imageUrl","alt","map","key","Continue","Quiz","_ref3","turnData","Boolean","window","location","hostname","match","name","state","ReactDOM","render","src_Quiz","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qKCKxC,SAASC,IACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,0DAMR,SAASE,EAATC,GAAyB,IAATC,EAASD,EAATC,MACd,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UAAKI,IAKX,SAASC,EAATC,GAAkC,IAAlBC,EAAkBD,EAAlBC,QAASC,EAASF,EAATE,MACvB,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWQ,MAAO,CAAEC,gBAAiB,UAClDZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKW,IAAKJ,EAAQK,SAAUX,UAAU,cAAcY,IAAI,YAE1Df,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZO,EAAMM,IAAI,SAAAV,GAAK,OACdN,EAAAC,EAAAC,cAACE,EAAD,CAAME,MAAOA,EAAOW,IAAKX,QAOnC,SAASY,IACP,OAAOlB,EAAAC,EAAAC,cAAA,YAaMiB,MAVf,SAAAC,GAA4B,IAAZC,EAAYD,EAAZC,SACd,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACH,EAAD,MACAC,EAAAC,EAAAC,cAACK,EAASc,GACVrB,EAAAC,EAAAC,cAACgB,EAAD,QCpCcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMjB,EAAU,CACd,CACEkB,KAAM,iBACNb,SAAU,wBACVJ,MAAO,CAAC,gBAAiB,aAAc,OAEzC,CACEiB,KAAM,YACNb,SAAU,2BACVJ,MAAO,CAAC,QAAS,YAAa,SAEhC,CACEiB,KAAM,SACNb,SAAU,aACVJ,MAAO,CAAC,UAAW,QAAS,eAI1BkB,EAAQ,CACZP,SAAU,CACRZ,QAASA,EAAQ,GACjBC,MAAOD,EAAQ,GAAGC,QAGtBmB,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAASH,GAAWI,SAASC,eAAe,SDmGvD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.76852ea1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\n\nfunction Hero() {\n  return (\n    <div className=\"row\">\n      <div className=\"jumbotron col-10 offset-1\">\n        <h1>UFC QUIZ</h1>\n        <p>select the right answer to continue playing</p>\n      </div>\n    </div>\n  );\n}\n\nfunction Book({ title }) {\n  return (\n    <div className=\"answer\">\n      <h4>{title}</h4>\n    </div>\n  );\n}\n\nfunction Turn({ authors, books }) {\n  return (\n    <div className=\"row turn\" style={{ backgroundColor: \"white\" }}>\n      <div className=\"col-4 offset-1\">\n        <img src={authors.imageUrl} className=\"authorimage\" alt=\"Author\" />\n      </div>\n      <div className=\"col-6\">\n        {books.map(title => (\n          <Book title={title} key={title}></Book>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction Continue() {\n  return <div></div>;\n}\n\nfunction Quiz({ turnData }) {\n  return (\n    <div className=\"container-fluid\">\n      <Hero />\n      <Turn {...turnData} />\n      <Continue />\n    </div>\n  );\n}\n\nexport default Quiz;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Quiz from \"./Quiz\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst authors = [\n  {\n    name: \"Conor Mcgregor\",\n    imageUrl: \"images/authors/mc.jpg\",\n    books: [\"The notorious\", \"mystic mac\", \"OG\"]\n  },\n  {\n    name: \"Jon Jones\",\n    imageUrl: \"images/authors/jones.jpg\",\n    books: [\"Bones\", \"pictogram\", \"GOAT\"]\n  },\n  {\n    name: \"Khabib\",\n    imageUrl: \"khabib.jpg\",\n    books: [\"grapper\", \"smesh\", \"The Eagle\"]\n  }\n];\n\nconst state = {\n  turnData: {\n    authors: authors[0],\n    books: authors[0].books\n  }\n};\nReactDOM.render(<Quiz {...state} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}